<compilation unit> ::= <type declarations>
<type declarations> ::= <type declaration> | <type declarations> <type declaration>
<type declaration> ::= <class declaration> | <interface declaration>
<interface declaration> ::= interface <identifier> <interface body>
<interface body> ::= { <method headers>? }
<method headers> ::= <method header> ; | <method headers> <method header> ;
<class declaration> ::= class <identifier> <super>? <interfaces>? <class body>
<interfaces> ::= implements <interface list>
<interface list> ::= <interface type> | <interface list> , <interface type>
<interface type> ::= <type name>
<super> ::= extends <class type>
<identifier> ::= [A-Za-z][A-Za-z0-9_]*
<class body> ::= { <class body declarations>? }
<class body declarations> ::= <class body declaration> | <class body declarations> <class body declaration>
<class body declaration> ::= <class member declaration> | <constructor declaration>
<class member declaration> ::= <field declaration> | <method declaration>
<constructor declaration> ::= <constructor declarator> <constructor body>
<constructor declarator> ::= <simple type name> ( <formal parameter list>? )
<formal parameter list> ::= <formal parameter> | <formal parameter list> , <formal parameter>
<formal parameter> ::= <type> <variable declarator id>
<type> ::= <reference type> | <primitive type>
<primitive type> ::= <type name>
<reference type> ::= <class type> | <interface type>
<class type> ::= <type name>
<type name> ::= <identifier>
<variable declarator id> ::= <identifier>
<simple type name> ::= <identifier>
<constructor body> ::= { <explicit constructor invocation>? <block statements>? }
<explicit constructor invocation>::= this ( <argument list>? ) ; | super ( <argument list>? ) ;
<block statements> ::= <block statement> | <block statements> <block statement>
<block statement> ::= <local variable declaration statement> | <statement>
<local variable declaration statement> ::= <local variable declaration> ;
<local variable declaration> ::= <type> <variable declarators>
<variable declarators> ::= <variable declarator> | <variable declarators> , <variable declarator>
<variable declarator> ::= <variable declarator id> | <variable declarator id> = <variable initializer>
<variable initializer> ::= <constant expression> | <class instance creation expression>
<constant expression> ::= <identifier>
<statement> ::= <statement without trailing substatement>
<statement without trailing substatement> ::= <block> | <empty statement> | <expression statement> | <return statement>
<empty statement> ::= ;
<expression statement> ::= <statement expression> ;
<return statement> ::= return <statement expression> ;
<statement expression> ::= <method invocation> | <class instance creation expression>
<block> ::= { <block statements>? }
<method invocation> ::= <method name> ( <argument list>? )
<method name> ::= <identifier>
<argument list> ::= <expression> | <argument list> , <expression>
<expression> ::= <assignment expression>
<assignment expression> ::= <conditional expression> | <assignment>
<conditional expression> ::= <conditional or expression>
<conditional or expression> ::= <conditional and expression>
<conditional and expression> ::= <inclusive or expression>
<inclusive or expression> ::= <exclusive or expression>
<exclusive or expression> ::= <and expression>
<and expression> ::= <equality expression>
<equality expression> ::= <relational expression>
<relational expression> ::= <shift expression>
<shift expression> ::= <additive expression>
<additive expression> ::= <multiplicative expression>
<multiplicative expression> ::= <unary expression>
<unary expression> ::= <unary expression not plus minus>
<unary expression not plus minus> ::= <postfix expression>
<postfix expression> ::= <primary> | <expression name>
<expression name> ::= <identifier>
<class instance creation expression> ::= new <class type> ( <argument list>? )
<primary> ::= <primary no new array>
<primary no new array> ::= this
<field access> ::= <primary> . <identifier>
<assignment> ::= <left hand side> <assignment operator> <assignment expression>
<left hand side> ::= <field access>
<assignment operator> ::= =
<field declaration> ::= <type> <variable declarators> ;
<method declaration> ::= <method header> <method body>
<method header> ::= <modifier>? <result type> <method declarator>
<modifier> ::= public | protected | static | private
<method declarator> ::= <identifier> ( <formal parameter list>? )
<result type> ::= <type>
<method body> ::= <block> | ;